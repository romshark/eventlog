// Code generated by MockGen. DO NOT EDIT.
// Source: cli.go

// Package cli_test is a generated GoMock package.
package cli_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cli "github.com/romshark/eventlog/cmd/eventlog/cli"
)

// MockExecuter is a mock of Executer interface.
type MockExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockExecuterMockRecorder
}

// MockExecuterMockRecorder is the mock recorder for MockExecuter.
type MockExecuterMockRecorder struct {
	mock *MockExecuter
}

// NewMockExecuter creates a new mock instance.
func NewMockExecuter(ctrl *gomock.Controller) *MockExecuter {
	mock := &MockExecuter{ctrl: ctrl}
	mock.recorder = &MockExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecuter) EXPECT() *MockExecuterMockRecorder {
	return m.recorder
}

// HandleCheck mocks base method.
func (m *MockExecuter) HandleCheck(path string, quiet bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCheck", path, quiet)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCheck indicates an expected call of HandleCheck.
func (mr *MockExecuterMockRecorder) HandleCheck(path, quiet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCheck", reflect.TypeOf((*MockExecuter)(nil).HandleCheck), path, quiet)
}

// HandleCreate mocks base method.
func (m *MockExecuter) HandleCreate(path string, meta map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreate", path, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCreate indicates an expected call of HandleCreate.
func (mr *MockExecuterMockRecorder) HandleCreate(path, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreate", reflect.TypeOf((*MockExecuter)(nil).HandleCreate), path, meta)
}

// HandleInmem mocks base method.
func (m *MockExecuter) HandleInmem(http cli.ConfHTTP, maxPayloadLen int, meta map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleInmem", http, maxPayloadLen, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleInmem indicates an expected call of HandleInmem.
func (mr *MockExecuterMockRecorder) HandleInmem(http, maxPayloadLen, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleInmem", reflect.TypeOf((*MockExecuter)(nil).HandleInmem), http, maxPayloadLen, meta)
}
}

// HandleRun mocks base method.
func (m *MockExecuter) HandleRun(path string, http cli.ConfHTTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRun", path, http)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRun indicates an expected call of HandleRun.
func (mr *MockExecuterMockRecorder) HandleRun(path, http interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRun", reflect.TypeOf((*MockExecuter)(nil).HandleRun), path, http)
}

// HandleVersion mocks base method.
func (m *MockExecuter) HandleVersion(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleVersion", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleVersion indicates an expected call of HandleVersion.
func (mr *MockExecuterMockRecorder) HandleVersion(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleVersion", reflect.TypeOf((*MockExecuter)(nil).HandleVersion), url)
}
